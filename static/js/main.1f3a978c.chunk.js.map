{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","selectFile","setSelectFile","schema","setSchema","uiSchema","setUISchema","uploadedFormData","setUploadedFormData","useEffect","fetch","process","then","res","json","data","className","type","accept","onChange","files","target","onClick","reader","FileReader","onload","event","JSON","parse","result","readAsText","formData","onSubmit","form","dataStr","encodeURIComponent","stringify","download","document","createElement","setAttribute","body","appendChild","click","remove","downloadFormData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iRA6EeA,MAzEf,WAAgB,IAAD,EACuBC,mBAAS,MADhC,mBACNC,EADM,KACMC,EADN,OAEeF,mBAAS,IAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGmBJ,mBAAS,IAH5B,mBAGNK,EAHM,KAGIC,EAHJ,OAImCN,mBAAS,IAJ5C,mBAINO,EAJM,KAIYC,EAJZ,KAyDb,OAnDAC,qBAAU,WACRC,MAAM,GAAD,OAAIC,mBAAJ,0BACFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLX,EAAUW,QAEb,IAEHN,qBAAU,WACRC,MAAM,GAAD,OAAIC,mBAAJ,oBACFC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLT,EAAYS,QAEf,IAsCD,yBAAKC,UAAU,OACb,2BAAOC,KAAK,OAAOC,OAAO,QAAQC,SArBjB,SAAC,GAA2B,IAAfC,EAAc,EAAxBC,OAAUD,MAChClB,EAAckB,EAAM,OAqBlB,4BAAQH,KAAK,SAASK,QAlBP,WACjB,GAAKrB,EAAL,CAIA,IAAMsB,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAACC,GACf,IAAMZ,EAAOa,KAAKC,MAAMF,EAAML,OAAOQ,QACrCrB,EAAoBM,IAGtBS,EAAOO,WAAW7B,MAMhB,UAGA,kBAAC,IAAD,CACEE,OAAQA,EACRE,SAAUA,EACV0B,SAAUxB,EACVyB,SAjCW,SAAC,IAZO,SAACC,GACxB,IAAMC,EAAO,wCAAoCC,mBAC/CR,KAAKS,UAAUH,EAAM,EAAG,KAEpBI,EAAWC,SAASC,cAAc,KACxCF,EAASG,aAAa,OAAQN,GAC9BG,EAASG,aAAa,WAAY,kBAClCF,SAASG,KAAKC,YAAYL,GAC1BA,EAASM,QACTN,EAASO,SAITC,CADiC,EAAfd,eC1BFe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAC8C,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f3a978c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from '@rjsf/semantic-ui';\nimport './App.css';\n\nfunction App() {\n  const [selectFile, setSelectFile] = useState(null);\n  const [schema, setSchema] = useState({});\n  const [uiSchema, setUISchema] = useState({});\n  const [uploadedFormData, setUploadedFormData] = useState({});\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/tutorial-schema.json`)\n      .then((res) => res.json())\n      .then((data) => {\n        setSchema(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/ui-schema.json`)\n      .then((res) => res.json())\n      .then((data) => {\n        setUISchema(data);\n      });\n  }, []);\n\n  const downloadFormData = (form) => {\n    const dataStr = `data:text/json;charset=utf-8, ${encodeURIComponent(\n      JSON.stringify(form, 0, 2),\n    )}`;\n    const download = document.createElement('a');\n    download.setAttribute('href', dataStr);\n    download.setAttribute('download', 'form-data.json');\n    document.body.appendChild(download);\n    download.click();\n    download.remove();\n  };\n\n  const onSubmit = ({ formData }) => {\n    downloadFormData(formData);\n  };\n\n  const onFileChange = ({ target: { files } }) => {\n    setSelectFile(files[0]);\n  };\n\n  const uploadFile = () => {\n    if (!selectFile) {\n      return;\n    }\n\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      const json = JSON.parse(event.target.result);\n      setUploadedFormData(json);\n    };\n\n    reader.readAsText(selectFile);\n  };\n\n  return (\n    <div className=\"App\">\n      <input type=\"file\" accept=\".json\" onChange={onFileChange} />\n      <button type=\"button\" onClick={uploadFile}>\n        Upload\n      </button>\n      <Form\n        schema={schema}\n        uiSchema={uiSchema}\n        formData={uploadedFormData}\n        onSubmit={onSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}