{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","schema","setSchema","formData","setFormData","useEffect","fetch","process","then","res","json","data","downloadFormData","dataStr","encodeURIComponent","JSON","stringify","download","document","createElement","setAttribute","body","appendChild","click","remove","className","type","accept","onChange","file","target","files","reader","FileReader","onload","event","parse","result","error","alert","readAsText","onSubmit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"mSA0DeA,MAtDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,KAIbC,qBAAU,WACRC,MAAM,GAAD,OAAIC,mBAAJ,0BACJC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLT,EAAUS,QAEX,IAEH,IAIMC,EAAmB,SAACT,GACxB,IAAMU,EAAU,gCAAkCC,mBAAmBC,KAAKC,UAAUb,IAC9Ec,EAAWC,SAASC,cAAc,KACxCF,EAASG,aAAa,OAAQP,GAC9BI,EAASG,aAAa,WAAY,kBAClCF,SAASG,KAAKC,YAAYL,GAC1BA,EAASM,QACTN,EAASO,UAmBX,OACE,yBAAKC,UAAY,OACf,2BAAOC,KAAK,OACLC,OAAO,QACPC,SApBQ,SAAC,GAA2B,IACvCC,EADsC,EAAxBC,OAAUC,MACX,GACbC,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,SAACC,GACf,IACE,IAAMzB,EAAOK,KAAKqB,MAAMD,EAAML,OAAOO,QACrCjC,EAAYM,GACZ,MAAO4B,GACPC,MAAM,qCAAuCD,KAIjDN,EAAOQ,WAAWX,MAQhB,kBAAC,IAAD,CAAM5B,OAAWA,EACXE,SAAaA,EACbsC,SArCO,SAAC,EAAYH,GAAW,IAAtBnC,EAAqB,EAArBA,SACjBS,EAAiBT,QCLDuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/B,SAASgC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAlB,GACLmB,QAAQnB,MAAMA,EAAMoB,c","file":"static/js/main.88d65f68.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from \"@rjsf/material-ui\";\nimport './App.css';\n\nfunction App() {\n  const [schema, setSchema] = useState({});\n  const [formData, setFormData] = useState({});\n\n  useEffect(() => {\n    fetch(`${process.env.PUBLIC_URL}/tutorial-schema.json`)\n    .then((res) => res.json())\n    .then((data) => {\n      setSchema(data);\n    });\n  }, []);\n\n  const onSubmit = ({formData}, error) => {\n    downloadFormData(formData);\n  }\n\n  const downloadFormData = (formData) => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(formData));\n    const download = document.createElement('a');\n    download.setAttribute(\"href\", dataStr);\n    download.setAttribute(\"download\", \"form-data.json\");\n    document.body.appendChild(download);\n    download.click();\n    download.remove();\n  }\n\n  const uploadFile = ({ target: { files } }) => {\n    const file = files[0];\n    const reader = new FileReader();\n\n    reader.onload = (event) => {\n      try {\n        const json = JSON.parse(event.target.result);\n        setFormData(json);\n      } catch (error) {\n        alert('error when trying to parse json = ' + error);\n      }\n    }\n\n    reader.readAsText(file);\n  }\n\n  return (\n    <div className = \"App\">\n      <input type=\"file\"\n             accept=\".json\"\n             onChange = { uploadFile } />\n      <Form schema = { schema }\n            formData = { formData }\n            onSubmit = { onSubmit } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}